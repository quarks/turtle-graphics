<!--    
    Build file for JS project
    Peter Lager 2025
    V0.2
-->
<project name="Turtle Graphics" default="init" basedir="./" >

    <property file="build.properties" />

    <!-- Temporary folder for intermdiate files created during documatation -->
    <property name="temp" location="./temp" />
    <property name="src_ts_temp" location="./src_ts_temp" />

	<!-- Create the time stamp -->
	<tstamp> 
		<format property="date" pattern="d-MMMM-yyyy  hh:mm aa" />
	</tstamp>

    <!-- Create the library min.js file    -->
    <target name="tg.compile" depends="tg.concat.js.files">        
        <property name="gcc.src" location="${tg.dist.dir}/${tg.file.js}" />
        <property name="gcc.dst" location="${tg.dist.dir}/${tg.file.min.js}" />
        <property name="gcc.lang.in" value="--language_in ECMASCRIPT_2021" />
        <property name="gcc.lang.out" value="--language_out ECMASCRIPT_NEXT" />
        <property name="gcc.run.line" value="${gcc.src} --js_output_file ${gcc.dst}  ${gcc.lang.in} ${gcc.lang.out}" />
        <echo message="Google Closure Compiler" />
        <delete file="${gcc.dst}" />
        <exec executable="npx">
            <arg line="google-closure-compiler ${gcc.run.line}" />
        </exec>
        <delete dir="${temp}" />      
    </target>

    <!-- Concatenate the JavaScript files and store result in 'dist/lib/???.ts' -->
    <target name="tg.concat.js.files" depends="tg.copy.js.files" >
        <echo message="Concatenate JavaScript files into one ready for GCC" />
        <!-- Concat order so that parent classes precede child classes  -->
        <loadfile property="jslist" srcfile="${tg.list.file}" />  
        <!-- Concatenated file -->
        <property name="jsfile" value="${tg.dist.dir}/${tg.file.js}" />
        <concat destfile="${jsfile}" fixlastline="true" >
            <header file="${tg.header.min}" ></header>
            <filelist dir="${temp}" files="${jslist}" />
        </concat>  
        <!-- Set version number -->
        <replace file="${jsfile}" token="!!VERSION!!" value="${lib.version}" />
    </target>

     <!-- Copy all the the JavaScript files into 'temp' folder -->
    <target name="tg.copy.js.files" >
        <echo message="Copying JavaScript files" />
        <copy todir="${temp}" flatten="true" >
            <!-- Remove any import statements (if any) -->
            <filterchain>
                <linecontains negate="true">
                    <contains value="import" />
                </linecontains>
            </filterchain>
            <fileset dir="${js.src.dir}" includes="**/*.js" />
        </copy>
    </target>

    <!-- Turtle text extension  -->

    <!-- Create the turtle text min.js file    -->
    <target name="tt.compile" depends="tt.prep.files">        
        <property name="gcc.src" location="${tt.dist.dir}/${tt.file.js}" />
        <property name="gcc.dst" location="${tt.dist.dir}/${tt.file.min.js}" />
        <property name="gcc.lang.in" value="--language_in ECMASCRIPT_2021" />
        <property name="gcc.lang.out" value="--language_out ECMASCRIPT_NEXT" />
        <property name="gcc.run.line" value="${gcc.src} --js_output_file ${gcc.dst}  ${gcc.lang.in} ${gcc.lang.out}" />
        <echo message="Google Closure Compiler" />
        <delete file="${gcc.dst}" />
        <exec executable="npx">
            <arg line="google-closure-compiler ${gcc.run.line}" />
        </exec>     
    </target>

    <!-- Copy all the the JavaScript files into 'temp' folder -->
    <target name="tt.prep.files" >
        <echo message="Preparing Turtle Text files" />
        <concat destfile="${tt.dist.dir}/${tt.file.js}" fixlastline="true" >
            <header file="${tt.header.min}" ></header>
            <filelist dir="" files="${js.src.dir}/${tt.src.file}" />
        </concat>
        <!-- Set version number -->
        <replace file="${tt.dist.dir}/${tt.file.js}" token="!!VERSION!!" value="${tt.version}" />
    </target>

    <target name="zip.guide">
        <echo message="Preparing Turtle Text files" />
        <zip destfile="${guide.dest.dir}/${guide.dest.file}" basedir="${guide.src.dir}" />
    </target>


</project>